# Complexity: O(n^3) time
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        res = len(s)
        if res == 0:
            return(res)

        ans = 0

        while res > 0:
            
            # if i + res <= len(s)
            # 0 to 0 + res
            # 1 to 1 + res
            # 2 to 2 + res
            # 3 to 3 + res

            for i in range(len(s) - res + 1):
                wd = s[i : i + res]         # Sliding Window
                mylst = list(wd)            # Itself O(n) time complexity
                print(mylst)
                myset = set(mylst)
                print(myset)

                if (len(myset) > ans) and (len(mylst) == len(myset)):
                    ans = len(myset)

                #-----------------------------
                
            res -= 1
        return ans